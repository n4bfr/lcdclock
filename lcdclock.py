#N4BFR Display for I2C RGB character LCD shield kit
#thanks to Adafruit for the base code.
import time
import board
import busio
import socket
import adafruit_character_lcd.character_lcd_rgb_i2c as character_lcd
import re
import sys

from gps3.agps3threaded import AGPS3mechanism
agps_thread = AGPS3mechanism()  # Instantiate AGPS3 Mechanisms
agps_thread.stream_data()  # From localhost (), or other hosts, by example, (host='gps.ddns.net')
agps_thread.run_thread()  # Throttle time to sleep after an empty lookup, default '()' 0.2 two tenths of a second

# Modify this if you have a different sized Character LCD
lcd_columns = 16
lcd_rows = 2

# Initialise I2C bus.
i2c = busio.I2C(board.SCL, board.SDA)

# Initialise the LCD class
lcd = character_lcd.Character_LCD_RGB_I2C(i2c, lcd_columns, lcd_rows)
agps_thread.run_thread()  # Throttle time to sleep after an empty lookup, default '()' 0.2 two tenths of a second

# Modify this if you have a different sized Character LCD
lcd_columns = 16
lcd_rows = 2

# Initialise I2C bus.
i2c = busio.I2C(board.SCL, board.SDA)

# Initialise the LCD class
lcd = character_lcd.Character_LCD_RGB_I2C(i2c, lcd_columns, lcd_rows)

lcd.clear()                                                                                                             

# Display time constantly and variables every 15 seconds
while True:
        t = time.strftime("%S")
        tf = float(t)
        if tf < 15:
                search_term = "Stratum"
                f = "/home/pi/lcdclock/tracking.txt"

                for line in open(f, 'r'):
                        if re.search(search_term, line):
                        

# Display time constantly and variables every 15 seconds
while True:
        t = time.strftime("%S")
        tf = float(t)
        if tf < 15:
                search_term = "Stratum"
                f = "/home/pi/lcdclock/tracking.txt"

                for line in open(f, 'r'):
                        if re.search(search_term, line):
                                lnshort = re.sub(' +', ' ', line)
                                ln2data = (lnshort)
                                if line == None:
                                        ln2data = ('Stratum NA')
        #if using a version of NTP instead of chrony, modify above to pull from an ntpq output
        #tracking.txt is generated by a crontab command "/2 * * * * chronyc tracking > /home/pi/lcdclock/tracking.txt"

        elif tf == 15:
                ln2data = "               "
        #at seconds 15, 30, 45 and 59 these clear the second row of data

        elif tf <30:
                hostname = socket.gethostname()
                                                ln2data = (lnshort)
                                if line == None:
                                        ln2data = ('Stratum NA')
        #if using a version of NTP instead of chrony, modify above to pull from an ntpq output
        #tracking.txt is generated by a crontab command "/2 * * * * chronyc tracking > /home/pi/lcdclock/tracking.txt"

        elif tf == 15:
                ln2data = "               "
        #at seconds 15, 30, 45 and 59 these clear the second row of data

        elif tf <30:
                hostname = socket.gethostname()
                ip = socket.gethostbyname(hostname)
                ln2data = ip
        #shows current IP address of network connected pi

        elif tf == 30:
                ln2data = "                "

        elif tf <45:
                lat = format(agps_thread.data_stream.lat)
                lon = format(agps_thread.data_stream.lon)
                #if in a 3 digit longitude change "3" to "2" in both lines below for proper display
                if lat == "n/a":
                        ln2data = "No Fix"
                        ln2data = ip
        #shows current IP address of network connected pi

        elif tf == 30:
                ln2data = "                "

        elif tf <45:
                lat = format(agps_thread.data_stream.lat)
                lon = format(agps_thread.data_stream.lon)
                #if in a 3 digit longitude change "3" to "2" in both lines below for proper display
                if lat == "n/a":
                        ln2data = "No Fix"
                else:
                        latr = abs(round(float(lat), 3))
                        lonr = abs(round(float(lon), 3))
                        ln2data = str(latr) + "N " + str(lonr) + "W"
                        #for East Longitude change "W" to "E" above
                        #for South Latitude change "N " to "S " above
                #displays current GPS position. Converts the string data from the agps output to a floating decimal
                #for rounding to 3 decimal places and then back to a string for display.

        elif tf == 45:
                ln2data = "                "

        elif tf <59:
                                latr = abs(round(float(lat), 3))
                        lonr = abs(round(float(lon), 3))
                        ln2data = str(latr) + "N " + str(lonr) + "W"
                        #for East Longitude change "W" to "E" above
                        #for South Latitude change "N " to "S " above
                #displays current GPS position. Converts the string data from the agps output to a floating decimal
                #for rounding to 3 decimal places and then back to a string for display.

        elif tf == 45:
                ln2data = "                "

        elif tf <59:
                line2 = open("/home/pi/lcdclock/msg4.txt", "r")                                                                         ln2data = line2.read()
                #vanity message.  Simply change the data in the file to something you like

        elif tf == 59:
                ln2data = "                "

        else:
                ln2data = ' File Error'



        lcd.color = [0, 0, 50] #red, green, blue  I may set this dynamically by time in the future
                lcd.color = [0, 0, 50] #red, green, blue  I may set this dynamically by time in the future
        lcd.cursor_position (1,0) #indents the data 1 column for symmetry
        lcd.column_align = True
        lcd.message = (time.strftime('%H:%M:%S  %Z\n') + ln2data)
